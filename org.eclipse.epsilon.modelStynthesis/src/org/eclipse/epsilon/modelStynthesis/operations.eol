//$instances 2
//var i:new ecore!EClass;
//i.create();
//i.getAnnotation("gmf.diagram","source").println;
//i.isAnnotatedAs("gmf.diagr").println();
//var ann: new EAnnotation;
//ann=annotate("gmf.diagram");
operation EPackage create(){
	self.name="ecore";
	
}
/*
$instances 10
operation EReference create(){
	self.name=randomString();
}
*/
@name root
operation EClass create(){
//var ann: new EAnnotation;
var detail:Map= new Map;
//detail.put("source","key");
self.annotate("gmf.diagram");
self.name=randomString();
}

@name node
operation EClass create(){
self.annotate("gmf.node");
self.name=randomString();
}

// gmf.node label
@name node
operation EClass create(){
	var sequence= Sequence{'internal', 'external', 'none'};
	var string:String = sequence.randomD();	
	var detail:Map= new Map;
	detail.put("label.placement",string);
	if(string<>'none'){
		var label:String= "";
		for(n in Sequence{1..randomInteger(1,4)}){
			var r:EAttribute = new EAttribute;
			var d:EDataType = new EDataType;
			d.name= randomString();
			r.name=randomString();
			r.eType=d;
			label=label+","+ r.name;	
			self.eStructuralFeatures.add(r);
		}
		detail.put("label",label);
		//self.annotate("abel.placement="+string+",label="+label.subString(1)+")");
	}
	self.annotate("gmf.node",detail);
	self.name=randomString();
}
//gmf.link source and target

$instances 2
@name link
operation EClass create(){
	var type = Sequence{'source','target'};
	var sequence= Sequence{'none', 'arrow', 'rhomb', 'filledrhomb','square', 'filledsquare', 'closedarrow', 'filledclosedarrow'};
	var detail:Map= new Map;
	detail.put('source', randomString());
	detail.put('target', randomString());
	if(randomBoolean()==true){
		detail.put("source.decoration",sequence.randomD());
		detail.put("target.decoration",sequence.randomD());
	}
	self.annotate("gmf.link",detail);
	self.name=randomString();
}

//gmf.node figure
$instances 2
@name node
operation EClass create(){
var sequence= Sequence{'rectangle', 'ellipse', 'rounded', 'svg','polygon'};
var string:String =sequence.randomD();
var detail:Map= new Map;
detail.put("figure",string);
if(string='polygon'){
	detail.put("polygon.x",randomInteger(20)+"");
	detail.put("polygon.y",randomInteger(20)+"");	
}
else if(string='svg'){
	detail.put("svg.uri",randomString());
}
self.annotate("gmf.node",detail);
self.name=randomString();
}

//names the classes created and we selected from the group
/*
@guard root
operation EClass link(){
	//var c:EClass=self.selectOne(t|t.isAnnotatedAs("gmf.diagram"));
	//c.addAll(root)
	if (self.isAnnotatedAs("gmf.diagram")){
		for(n in EClass.all.select(t|t.isAnnotatedAs("gmf.node") or t.isAnnotatedAs("gmf.link"))){
			var r:EReference = new EReference;
			r.name=randomString();
			r.containment=true;
			r.eType=n;
			self.eStructuralFeatures.add(r);
		}
	}
	
}
*/
operation EPackage link(){
	self.eClassifiers.addAll(EClass.all);
}
//@guard self.setAsContext(root)
@guard root
operation EClass link(node,link){
		for(n in node.randomD(2)){
			var r:EReference = new EReference;
			r.name=randomString();
			r.containment=true;
			r.eType=n;
			if(r.randomBoolean==true){
				r.eAnnotations.add(createAnnotation("gmf.compartment"));
			}
			self.eStructuralFeatures.add(r);
		}	
		for(n in link){
			var r:EReference = new EReference;
			r.name=randomString();
			r.containment=true;
			r.eType=n;
			self.eStructuralFeatures.add(r);
		}	

}
@guard node
operation EClass link(){
	if(self.getAnnotationValue('gmf.node', 'label').isDefined()){
		var label:String = self.getAnnotationValue('gmf.node', 'label');
		for(name in label.split(',').collect(s|s.trim())){
			var a:EAttribute = new EAttribute;
			a.name=name;
			self.eStructuralFeatures.add(a);
		}
	}
}
@guard link
operation EClass link(){
	/*
	if(self.getAnnotationValue('gmf.link', 'label').isDefined()){
		var label:String = self.getAnnotationValue('gmf.link', 'label');
		for(name in label.split(',').collect(s|s.trim())){
			var a:EAttribute = new EAttribute;
			a.name=name;
			self.eStructuralFeatures.add(a);
		}
	}
*/
	if(self.getAnnotationValue('gmf.link', 'source').isDefined()){
		var name:String = self.getAnnotationValue('gmf.link', 'source');
		var r:EReference = new EReference;
		r.name=name;
		r.containment=true;
		r.eType=EClass.all.randomD();
		self.eStructuralFeatures.add(r);
	}
	if(self.getAnnotationValue('gmf.link', 'target').isDefined()){
		var name:String = self.getAnnotationValue('gmf.link', 'target');
		var r:EReference = new EReference;
		r.name=name;
		r.containment=true;
		r.eType=EClass.all.randomD();
		self.eStructuralFeatures.add(r);
	}
	/*
	var sequence= Sequence{'source', 'target'};
	var name= new Sequence;
	for(n in EClass.all.randomD(2)){
		var r:EReference = new EReference;
		r.name=randomString();
		r.containment=true;
		r.eType=n;
		name.add(r.name);
		self.eStructuralFeatures.add(r);
	}
	for(n in Sequence{0..(sequence.size()-1)}){
		var details: new EStringToStringMapEntry;
		details.key=sequence.at(n);
		details.value=name.at(n);
		self.getEAnnotation("gmf.link").details.add(details);
	}
*/
				
			
}

/*//we select form the model
operation EClass link(){
	var c:EClass=EClass.all.selectOne(t|t.isAnnotatedAs("gmf.diagram"));
	var d:EClass=EClass.all.select(t|t.isAnnotatedAs("gmf.node")).random();
	if(c.isDefined() and d.isDefined()){
		c.link(d);
	}
	//self.link(nod);
	//class1.isAnnotatedAs("gmf.diagram");
}
*/
operation EClass isAnnotatedAs(source:String){
	return self.getEAnnotation(source).isDefined();
}
operation EClass getAnnotationValue(source:String,key:String){
	if(self.getEAnnotation(source).isDefined()){
		var detail:EStringToStringMapEntry= self.getEAnnotation(source).details.selectOne(k|k.key=key);
		if(detail.isDefined()){
			var value:String = detail.value;
			if(value.isDefined()){
				return value;
			}
		}
	}
	return null;
}
/*$instances size
operation EClass create(){
self.annotate("gmf.node");

}*/
operation EClass annotate(string:String){
	self.annotate(string, new Map);
}
operation EClass annotate(string:String, details:Map){
	var ann: new EAnnotation;
	ann.source=string;
	for(d in details.keySet()){
		var detail: new EStringToStringMapEntry;
		detail.key=d;
		detail.value=details.get(d);
		ann.details.add(detail);
	}
	self.eAnnotations.add(ann);
}

operation createAnnotation(string:String){
var ann: new EAnnotation;
//var details: new EStringToStringMapEntry;
var stSequence: new Sequence(String);
var stSequence2: new Sequence(String);
var temp:String;
//string.println();
if("(".isSubstringOf(string)){
	stSequence=string.split("\\(");
	ann.source= stSequence[0];
	temp=stSequence[1].trim;
	temp= temp.substring(0,temp.length-1);
	if(",".isSubstringOf(temp)){
		stSequence= temp.split("\\,");
		for(st:String in stSequence){
			if("=".isSubstringOf(st)){
				stSequence2= st.split("\\=");
				var details: new EStringToStringMapEntry;
				details.key=stSequence2[0];
				details.value=stSequence2[1];
				ann.details.add(details);
				//ann.details.println();
			}
		}	
	}
	else{
		if("=".isSubstringOf(temp)){
			var details: new EStringToStringMapEntry;
			stSequence2= temp.split("\\=");	
			details.key=stSequence2[0];
			details.value=stSequence2[1];
			ann.details.add(details);
			//ann.details.println();
		}
	}
	//self.println(stSequence.size());
}
else{
	ann.source=string;
	//self.println("not found");
}
return ann;
//ann.println("success");
}
operation EAnnotation addDetails(string:String){
	if("=".isSubstringOf(string)){
		var details: new EStringToStringMapEntry;
		var sequence:Sequence= string.split("\\=");	
		details.key=sequence[0];
		details.value=sequence[1];
		self.details.add(details);
	}
	return self;
	
}

operation createReference(type:Classifier){
	var r:EReference = new EReference;
	r.name=randomString();
	r.containment=true;
	r.eType=n;
	return r;
}
operation createAttribute(){
	var r:EAttribute = new EAttribute;
	r.name=randomString();
	r.eType=n;
	return r;
}
operation getDatatypes(){

}
operation createLink(){

}
