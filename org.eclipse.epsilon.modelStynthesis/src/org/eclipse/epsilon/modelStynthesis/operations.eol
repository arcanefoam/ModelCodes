//$instances 2
var i:new ecore!EClass;
i.create();
i.getAnnotation("gmf.diagram","source").println;
//i.isAnnotatedAs("gmf.diagr").println();
//var ann: new EAnnotation;
//ann=annotate("gmf.diagram");
$instances 1
@name root
operation EClass create(){
//var ann: new EAnnotation;
self.annotate("gmf.diagram(source=key,target=svg.uri)");
//ann.source="gmf.diagram";
self.name=randomString();
//self.eAnnotations.add(ann);
//println(instances);
//annotate("gmf.diagram(source=key)");
//self.eAnnotations.println("successful");
//self. reference = EClass.all.select
}

$instances 5
@name node
operation EClass create(){
self.annotate("gmf.node");
//ann.source="gmf.diagram";
self.name=randomString();
}
//names the classes created and we selected from the group
operation EClass link(){
	var c:EClass=self.selectOne(t|t.isAnnotatedAs("gmf.diagram"));
	for(n in self){
		if (n.isAnnotatedAs("gmf.node")){
			var r:EReference = new EReference;
			r.name=randomString();
			r.containment=true;
			r.eType=n;
			c.eStructuralFeatures.add(r);
		}
	}
}

/*//we select form the model
operation EClass link(){
	var c:EClass=EClass.all.selectOne(t|t.isAnnotatedAs("gmf.diagram"));
	var d:EClass=EClass.all.select(t|t.isAnnotatedAs("gmf.node")).random();
	if(c.isDefined() and d.isDefined()){
		c.link(d);
	}
	//self.link(nod);
	//class1.isAnnotatedAs("gmf.diagram");
}
*/
operation EClass isAnnotatedAs(source:String){
	return self.getEAnnotation(source).isDefined();
}
operation EClass getAnnotation(source:String,key:String){
	var detail:EStringToStringMapEntry= self.getEAnnotation(source).details.selectOne(k|k.key=key);
	if(detail.isDefined()){
		var value:String = detail.value;
		if(value.isDefined()){
			return value;
		}
	}
	return null;
}
/*$instances size
operation EClass create(){
self.annotate("gmf.node");

}*/
operation EClass annotate(string:String){
var ann: new EAnnotation;
//var details: new EStringToStringMapEntry;
var stSequence: new Sequence(String);
var stSequence2: new Sequence(String);
var temp:String;
//string.println();
if("(".isSubstringOf(string)){
	stSequence=string.split("\\(");
	ann.source= stSequence[0];
	temp=stSequence[1].trim;
	temp= temp.substring(0,temp.length-1);
	if(",".isSubstringOf(temp)){
		stSequence= temp.split("\\,");
		for(st:String in stSequence){
			if("=".isSubstringOf(st)){
				stSequence2= st.split("\\=");
				var details: new EStringToStringMapEntry;
				details.key=stSequence2[0];
				details.value=stSequence2[1];
				ann.details.add(details);
				//ann.details.println();
			}
		}	
	}
	else{
		if("=".isSubstringOf(temp)){
			var details: new EStringToStringMapEntry;
			stSequence2= temp.split("\\=");	
			details.key=stSequence2[0];
			details.value=stSequence2[1];
			ann.details.add(details);
			//ann.details.println();
		}
	}
	//self.println(stSequence.size());
}
else{
	ann.source=string;
	//self.println("not found");
}
//ann.println("success");
self.eAnnotations.add(ann);
//self.eAnnotations.details.println();
//self.abstract=false;
//return self;
}

