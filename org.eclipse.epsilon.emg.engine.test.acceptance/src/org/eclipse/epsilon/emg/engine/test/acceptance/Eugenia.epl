operation EPackage create(){
	self.name="MyEcore";
}

operation EClass create(){
	self.annotate("gmf.diagram");
	self.name= nextString("UPPER_NUM", 8);	
}

$instances Sequence{5,Nodes}
operation EClass create(){
	self.name=nextFromListAsSample("names") + "_N";	
	var detail:Map= new Map;
	//polygon
	if(nextBoolean()){
		var sequence= Sequence{'rectangle', 'ellipse', 'rounded', 'svg','polygon'};
		var seq= Sequence{'polygon','svg'};
		var type = nextFromCollection(seq);
		detail.put("figure",type);
		if(type='polygon'){
			detail.put("polygon.x",nextInteger(20)+"");
			detail.put("polygon.y",nextInteger(20)+"");	
		}
		else if(type='svg'){
			detail.put("svg.uri",nextURI());
		}
	}

	//label
	if(nextBoolean()){
		var sequence1= Sequence{'internal', 'external', 'none'};
		var string:String = nextFromCollection(sequence1);	
		var detail:Map= new Map;
		detail.put("label.placement",string);
		if(string<>'none'){
			var label:String= "";
			for(n in Sequence{1..nextInteger(1,4)}){
				var r:EAttribute = new EAttribute;
				r.name= nextFromList("breeds");
				label=label+","+ r.name;
				self.eStructuralFeatures.add(r);
			}
			detail.put("label",label.subString(1));
		}
	}
	self.annotate("gmf.node",detail);
}

$instances 5
operation EClass create(){
	self.name=nextFromListAsSample("names") + "_L";	
	var type = Sequence{'source','target'};
	var sequence= Sequence{'none', 'arrow', 'rhomb', 'filledrhomb','square', 'filledsquare', 'closedarrow', 'filledclosedarrow'};
	var detail:Map= new Map;
	detail.put('source', nextString("ID", 7));
	detail.put('target', nextString("ID", 7));
	if(nextBoolean()==true){
		detail.put("source.decoration",nextFromCollection(sequence));
		detail.put("target.decoration",nextFromCollection(sequence));
	}
	//label
	if(nextBoolean()){
		var sequence1= Sequence{'internal', 'external', 'none'};
		var string:String = nextFromCollection(sequence1);	
		var detail:Map= new Map;
		detail.put("label.placement",string);
		if(string<>'none'){
			var label:String= "";
			for(n in Sequence{1..nextInteger(1,4)}){
				var r:EAttribute = new EAttribute;
				r.name= nextFromList("breeds");
				label=label+","+ r.name;
				self.eStructuralFeatures.add(r);
			}
			detail.put("label",label.subString(1));
		}
	}
	self.annotate("gmf.link",detail);
}

@name attribute
$instances Sequence{2,5}
operation EAttribute create(){
	self.name= nextFromList("breeds");
}

$instances 5
operation EDataType create(){
	self.name=nextString("ID", 7);
}

operation EClass isAnnotatedAs(source:String){
	//self.println();
	return self.getEAnnotation(source).isDefined();
}

operation EClass getAnnotationValue(source:String,key:String){
	if(self.getEAnnotation(source).isDefined()){
		var detail:EStringToStringMapEntry= self.getEAnnotation(source).details.selectOne(k|k.key=key);
		if(detail.isDefined()){
			var value:String = detail.value;
			if(value.isDefined()){
				return value;
			}
		}
	}
	return null;
}

operation EClass annotate(string:String){
	self.annotate(string, new Map);
}

operation EClass annotate(string:String, details:Map){
	var ann: new EAnnotation;
	ann.source=string;
	for(d in details.keySet()){
		var detail: new EStringToStringMapEntry;
		detail.key=d;
		detail.value=details.get(d);
		ann.details.add(detail);
	}
	self.eAnnotations.add(ann);
}
operation EAnnotation addDetails(details:Map){
	for(d in details.keySet()){
		var detail: new EStringToStringMapEntry;
		detail.key=d;
		detail.value=details.get(d);
		self.details.add(detail);
	}
}

//@probability 0.5
pattern packageClasses
	pack:EPackage, c:EClass
	guard : pack.name="MyEcore"
{
	onmatch {
		pack.eClassifiers.add(c);	
	}
}

pattern packageDataTypes
	pack:EPackage, dt:EDataType
	guard : pack.name="MyEcore"
{
	onmatch {
		pack.eClassifiers.add(dt);
	}
}

pattern attribute
	attr:EAttribute
	guard: attr.etype.isUndefined(){
		onmatch{
			attr.eType = nextFromCollection(EDataType.all);
		}
	}
	
pattern attribute2
	attr:EAttribute
	from: getCreatedElements("attribute")
	guard: attr.eContainer.isUndefined() {
		onmatch{
			nextFromCollection(EClass.all).eStructuralFeatures.add(attr);
		}
	}

$number Sequence{1,EClass.all.select(t|t.isAnnotatedAs("gmf.node")).size()}
// Add nodes to the gmf diagram
pattern node
root:EClass, node:EClass {
	match : root.isAnnotatedAs("gmf.diagram") and
		node.isAnnotatedAs("gmf.node")
	onmatch
	{
		var r= EReference.createInstance();
		r.name=nextString("LETTER_LOWER", 7);
		r.eType=node;
		root.eStructuralFeatures.add(r);
	}
}

// Add links to the gmf diagram
pattern link
root:EClass, link:EClass{
	match : root.isAnnotatedAs("gmf.diagram") and
		link.isAnnotatedAs("gmf.link")	
	onmatch
	{
		var r= EReference.createInstance();
		r.name=nextString("LETTER_LOWER", 7);
		r.eType=link;
		r.containment=true;
		root.eStructuralFeatures.add(r);
	}
}

@noRepeat
pattern linkSource
	class1:EClass
	from: EClass.all.select(t|t.getAnnotationValue("gmf.link","source").isDefined()),
		class3:EClass
	guard: class1<>class3 {
		onmatch{
			var r =EReference.createInstance();
			r.name= class1.getAnnotationValue("gmf.link","source");
			r.eType= class3;
			class1.eStructuralFeatures.add(r);		
		}
	}

@noRepeat
pattern linkTarget
	class1:EClass
	from: EClass.all.select(t|t.getAnnotationValue("gmf.link","target").isDefined()),
	class3:EClass
	guard: class1<>class3{
		onmatch{
			var r =EReference.createInstance();
			r.name= class1.getAnnotationValue("gmf.link","target");
			r.eType= class3;
			class1.eStructuralFeatures.add(r);	
		}
	}
